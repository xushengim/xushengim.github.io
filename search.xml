<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HandleImage</title>
      <link href="/2021/11/06/HandleImage/"/>
      <url>/2021/11/06/HandleImage/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇博文讲解了本地图片的路径设置"><a href="#这篇博文讲解了本地图片的路径设置" class="headerlink" title="这篇博文讲解了本地图片的路径设置"></a>这篇博文讲解了本地图片的路径设置</h1><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">(32条消息) hexo博客中插入图片失败——解决思路及个人最终解决办法_m0_43401436的博客-CSDN博客</a></p><p>本地source文件夹里的md文件和图片整好后，hexo执行编译工作，在public文件夹中生成网页及图片</p><h1 id="下载插件并修改代码确实解决了问题"><a href="#下载插件并修改代码确实解决了问题" class="headerlink" title="下载插件并修改代码确实解决了问题"></a>下载插件并修改代码确实解决了问题</h1><p>安装的插件是hexo-asset-image, 将/node_modules/hexo-asset-image/index.js的代码修改为:</p><p>具体过程可以参考这篇博文<a href="https://www.cnblogs.com/cscshi/p/15196100.html">Hexo-NexT 添加图片 - chang101 - 博客园 (cnblogs.com)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="持久化文章url后，出现了新的问题"><a href="#持久化文章url后，出现了新的问题" class="headerlink" title="持久化文章url后，出现了新的问题"></a>持久化文章url后，出现了新的问题</h1><p>&emsp;&emsp;本博客参考了系列视频<a href="https://space.bilibili.com/13282871/video">卷二兔的个人空间_哔哩哔哩_bilibili</a>制作，作者使用了持久化文章url的技术。        </p><p>&emsp;&emsp;持久化文章url-uniform resource locator-同一资源定位符，是为了文章更好地被搜索引擎收录(需要不少配置)，生成简单且不随标题而改变的url。</p><p>&emsp;&emsp;<strong>但是！使用abbrlink持久化文章链接名称后，图片路径在本地没问题，部署到github后，其html网页中的图片路径会出新问题。</strong></p><p>&emsp;&emsp;试图看index.js在干嘛，无果，于是怕麻烦的我取消了持久化，回到了美好的从前。</p><h1 id="可以使用图床"><a href="#可以使用图床" class="headerlink" title="可以使用图床"></a>可以使用图床</h1><p>&emsp;&emsp;本博客参考了系列视频<a href="https://space.bilibili.com/13282871/video">卷二兔的个人空间_哔哩哔哩_bilibili</a>制作，其中提到了图床技术，将所有图片上传到github上的图床仓库，这样本地md文件和生成的网页中，图片的地址就都是网上图片了，从而不用考虑文件结构的变化。理论上，使用图床，就可以解决持久化url的问题。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>访问github并不容易</span></div>    <div class="hide-content"><p>&emsp;&emsp;可是访问github并不容易，需要处理域名污染(查真实ip地址来改hosts，防止dns-domain name server-域名服务器返回错误的ip地址)，需要vpn(加密请求的ip地址，使其符合路由节点的入站规则，拿到东西了再在本机上解密)。</p><p>&emsp;&emsp;然而网页和图片都在github的服务器上，所以要么都能访问到，要么都访问不到，所以真要搞一个基于github的博客，这样搞还是挺好的。</p><p>&emsp;&emsp;但是我只是想有一个记录自己所思所想的博客，觉得本地搞好方便，省去了搞ip的麻烦，果然还是回退到二吧。</p></div></div><p>&emsp;&emsp;其实根本原因还是不知道hexo是怎么把source中的md文件和图片生成为pulic中的网页和图片的，要是我知道用什么语法改哪个配置文件，就能自己设置两者的对应关系了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通用测量单位</title>
      <link href="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/"/>
      <url>/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>一秒到底是多久？一米到底是多长？一克到底是多重？……？</p><p>没有统一的标准，就无法观测和记录世间的一切客观属性。</p><p>那么，我们习以为常的观测单位是怎么产生的呢？</p><h1 id="国际单位制"><a href="#国际单位制" class="headerlink" title="国际单位制"></a>国际单位制</h1><p>&emsp;&emsp;国际单位制（法语：Système International d’Unités ，缩写：SI）源自米制，是国际计量大会采纳和推荐的一贯单位制。国际单位制是国际通用的测量语言，是人类描述和定义世间万物的标尺。</p><table><thead><tr><th align="center">物的属性</th><th align="center">基本单位</th></tr></thead><tbody><tr><td align="center">时间</td><td align="center">秒(second)</td></tr><tr><td align="center">长度</td><td align="center">米</td></tr><tr><td align="center">质量</td><td align="center">千克</td></tr><tr><td align="center">电流</td><td align="center">安培</td></tr><tr><td align="center">温度</td><td align="center">开尔文</td></tr><tr><td align="center">物质的量</td><td align="center">摩尔</td></tr><tr><td align="center">发光强度</td><td align="center">坎德拉</td></tr></tbody></table><h2 id="时间：一秒到底是多久？"><a href="#时间：一秒到底是多久？" class="headerlink" title="时间：一秒到底是多久？"></a>时间：一秒到底是多久？</h2><p>&emsp;&emsp;时间是其中最抽象的概念，不像长短，重量给人的直观感受，人是通过周围事物的改变，通过太阳升起又落下，树木枯萎又抽芽，温度冷转冷又转热，朱颜辞镜花辞树，才感觉到，事物在一刻不停地改变着，有一种不可阻挡，永不回头，完全不可控的力量，推动着万物的改变。人称此力为时，时如川，裹挟着落花，不停地向前流动。</p><p>&emsp;&emsp;人觉得有必要记录重要的事物特征，顺应天时以求更好地过活，于是根据事物重要特征的出现，定义了重要的时间点：如日出之时，日落之时。根据时间点的间隔又定义了原始的时间单位：如一日。从而又产生了新的时间点和时间单位：如月缺之日，月圆之日，一月，温暖之月，寒冷之月，一季等。</p><p>&emsp;&emsp;一开始，人定义了重要的时点，产生了时间单位的概念（日，月，年等），接着，人试图用规律变化的工具来人造更小的时段。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>古老的计时工具</span></div>    <div class="hide-content"><p>运用自然物质和简单物理原理来计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/fed0faca79b740aa9676d782d24f0cc8.jpeg" alt="img"></p><p>水钟也叫漏刻，以水的流动计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/9cffe790183c4eaab13c1e71e915a5bd.gif" alt="img"></p><p>沙漏计时器，以沙的流动计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/866571d17fae47ceb1c8f054dc33f729.jpg" alt="img"></p><p>古代计时器——日晷，立杆成影的成语即来源于此，借助太阳的位置变化，光的直线传播计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/56d058943da347efa022bbc40df141bc.jpeg" alt="img"></p><p>1090年，北宋发明</p><p>水运仪象台（现代复建），是世界上的钟表鼻祖，具有天文观测，天文演示，自动报时功能。</p></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>伽利略发现了摆的等时性</span></div>    <div class="hide-content"><p>&emsp;&emsp;据说,有一次伽利略到教堂作礼拜,礼拜开始不久,一位工人给教堂中的大吊灯添加灯油时,不经意触动了吊灯,使它来回摆动。摆动着的大吊灯映入了伽利略的眼帘,引起他的注意。伽利略聚精会神地观察着,他感觉到吊灯来回摆动的时间好像是相等的。</p><p>&emsp;&emsp;伽利略知道人的脉搏是均匀跳动的,于是,他利用自己的脉搏计时,同时数着吊灯的摆动次数。起初,吊灯在摆动的幅度比较大,摆动速度也比较大,伽利略测算了来回摆动一次的时间。过了一会儿,吊灯摆动的幅度变小了,摆动速度也变慢了,此时,他又测量了吊灯来回摆动一次的时间。让他大为吃惊的是,两次测量的时间是相同的。于是伽利略继续测量来回摆动一次的时间,直到吊灯几乎停止摆动时才结束。可是每次测量的结果都表明来回摆动一次需要相同的时间。通过这些测量使伽利略发现:吊灯来回摆动一次需要的时间 与摆动幅度的大小无关,无论摆幅大小如何,来回摆动一次所需时间是相同的,也就是说吊灯的摆动具有等时性,或者说具有周期性。</p><p>&emsp;&emsp; 伽利略是一位十分认真又喜欢研究问题的人,根本不会满足只从一次实验中得到的结果。对于自然现象,他总是反复进行实验研究,探索其中蕴藏的奥秘。他想,吊灯摆动的快慢(也称为摆动的周期)可能跟哪些因素有关呢? 通过在教堂中的观察,伽利略已经知道,摆动的周期跟摆动幅度无关。他猜想,是否跟吊灯的轻重有关呢?是否跟吊绳的长短有关呢?还有没有其他因素呢? 为了模拟吊灯的摆动,他找来丝线、细绳、大小不同的木球、铁球、石块、铜球等实验材料,用细绳的一端系上小球,将另一端系在天花板上,这样就做成了一个摆。用这套装置,伽利略继续测量探索摆动的周期。他先用铜球实验,又分别换用铁球和木球实验。实验使伽利略看到,无论用铜球、铁球,还是木球实验,只要摆长不变,来回摆动一次所用时间就相同。这表明单摆的摆动周期与摆球的质量无关。伽利略又做了十几个摆长不同的摆,逐个测量它们的周期。实验表明:摆长越长,周期也越长,摆动得就越慢。</p></div></div><p>再后来出现了晶振，机械表升级成为电子表，对时间间隔的定义也精确到了微秒级。</p><p>后来通过研究电子跃迁，发明了原子钟。精度可以达到几十万年一秒的误差。</p><p>再后来研究相对论，这些就脱离了日常生活，接触不到了，故不谈。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>长度：一米到底是多长？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>质量：一千克到底是多重？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>电流：？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>温度：？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>物质的量？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>发光强度？</span></div>    <div class="hide-content"></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的引用是什么?</title>
      <link href="/2021/11/03/quote/"/>
      <url>/2021/11/03/quote/</url>
      
        <content type="html"><![CDATA[<h1 id="普通变量的引用类型"><a href="#普通变量的引用类型" class="headerlink" title="普通变量的引用类型"></a>普通变量的引用类型</h1><h2 id="main函数中，int赋值给int"><a href="#main函数中，int赋值给int" class="headerlink" title="main函数中，int赋值给int"></a>main函数中，int赋值给int</h2><p>int a = 1;</p><p>int b = a;</p><p><img src="/2021/11/03/quote/1.png" alt="1.png"></p><p>-0x8(%rbp)存放a的值，-0x4(%rbp)存放b的值。</p><p>注：只有ab变量时，没有sub rsp的操作，a,b在栈顶之外，加上c[20]数组后才有sub rsp的操作。</p><h2 id="main函数中，int赋值给int-amp"><a href="#main函数中，int赋值给int-amp" class="headerlink" title="main函数中，int赋值给int&amp;"></a>main函数中，int赋值给int&amp;</h2><p>int a = 1；</p><p>int&amp; b = a;</p><p><img src="/2021/11/03/quote/2.png" alt="2"></p><p>-0x14(%rbp)存放变量a的值，-0x10(%rbp)存放b的值，为变量a的地址。</p><h2 id="其它函数中-形参为引用类型"><a href="#其它函数中-形参为引用类型" class="headerlink" title="其它函数中,形参为引用类型"></a>其它函数中,形参为引用类型</h2><p>void f(int&amp;)</p><p><img src="/2021/11/03/quote/3.png" alt="3"></p><p>-0x14(%rbp)存放变量a的值，-0x10(%rbp)存放变量b的值，为变量a的地址。变量a的地址存放到rdi，作为参数传给函数f。</p><p><img src="/2021/11/03/quote/4.png" alt="4"></p><p>-0x8(%rbp)存放变量c的值，为变量a的地址。故而，函数f()获得了main函数中变量的指针。我们再来看一下void f(int*)的反汇编代码：</p><p><img src="/2021/11/03/quote/5.png" alt="5"></p><p><img src="/2021/11/03/quote/6.png" alt="6"></p><p>和传指针的汇编代码，步骤是一样的。</p><h2 id="其它函数中-返回类型为引用类型"><a href="#其它函数中-返回类型为引用类型" class="headerlink" title="其它函数中,返回类型为引用类型"></a>其它函数中,返回类型为引用类型</h2><p>int&amp; f(int)</p><h1 id="类的引用类型"><a href="#类的引用类型" class="headerlink" title="类的引用类型"></a>类的引用类型</h1><h2 id="main函数中，创建类A的实例"><a href="#main函数中，创建类A的实例" class="headerlink" title="main函数中，创建类A的实例"></a>main函数中，创建类A的实例</h2><p><img src="/2021/11/03/quote/7.png" alt="7"></p><p>进入main后，再进入A的构造函数A()，在A中初始化类A的成员变量</p><h2 id="main函数中，A赋值给A-amp"><a href="#main函数中，A赋值给A-amp" class="headerlink" title="main函数中，A赋值给A&amp;"></a>main函数中，A赋值给A&amp;</h2><p>A a;</p><p>A&amp; b = a; </p><h2 id="成员函数中，形参为引用类型"><a href="#成员函数中，形参为引用类型" class="headerlink" title="成员函数中，形参为引用类型"></a>成员函数中，形参为引用类型</h2><p>void A::A(A&amp;)</p><h2 id="成员函数中，返回类型为引用类型"><a href="#成员函数中，返回类型为引用类型" class="headerlink" title="成员函数中，返回类型为引用类型"></a>成员函数中，返回类型为引用类型</h2><p>A&amp; A::f()</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
