<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自然常数e</title>
      <link href="/2021/11/08/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/"/>
      <url>/2021/11/08/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随机变量的矩</title>
      <link href="/2021/11/08/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E7%9F%A9/"/>
      <url>/2021/11/08/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E7%9F%A9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>映射</title>
      <link href="/2021/11/08/%E6%98%A0%E5%B0%84/"/>
      <url>/2021/11/08/%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="从定义域到值域"><a href="#从定义域到值域" class="headerlink" title="从定义域到值域"></a>从定义域到值域</h1><p><strong>定义域</strong>：原始值的集合，比如几个学生的姓名{小明，小王，小张}</p><p><strong>值域</strong>：目标值的集合，比如几个学生的学号{1,2,3}</p><p><strong>映射</strong>：(原始值,目标值)对的集合，反映从定义域的某个值变成某个值的对应关系，比如学生和学号的对应关系{(1,小明)，(2,小王)，(3,小张)}</p><p><strong>函数</strong>：一个函数，是从一个映射(对应关系)产生的一种作用，称学生姓名小王在函数<strong>学号=将学生姓名变成学号作用(姓名)</strong>(简称函数f)的作用下，变成了2。称在这种作用中，学生姓名为自变量(因)，称学号为因变量(果)。</p><p>&emsp;&emsp;函数一词的由来(老实说，改成作用更好)：函数，最早由中国清朝数学家李善兰翻译，出于其著作《代数学》。之所以这么翻译，他给出的原因是“凡此变数中函彼变数者，则此为彼之函数”，也即函数指一个量随着另一个量的变化而变化，或者说一个量中包含另一个量。<strong>从中可以看出，函数是指代因变量，表示因变量是含有自变量的变数，故而我们常称在作用y=5x中，y是x的一个函数</strong></p><h1 id="经典的映射"><a href="#经典的映射" class="headerlink" title="经典的映射"></a>经典的映射</h1><h2 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h2><h2 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h2><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><strong>……</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>加减乘除</title>
      <link href="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
      <url>/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-9"><a href="#1-9" class="headerlink" title="1-9"></a>1-9</h1><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为1，</p><br><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为2，</p><br><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为3,</p><br><p><strong>…</strong></p><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为9</p><br><p><strong>十进制，当低位有十个苹果时，低位清零，进1到高位：</strong></p><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为10</p><br><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><div style="float:left;border:solid 1px 000;margin:2px;height:30;width:30;"><img src="/2021/11/08/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/001EFA2D.png" width="48" height="48"></div><p>记为11</p><p><br><strong>…</strong></p><p><strong>数字简化了有关数量的表述</strong></p><h1 id="加"><a href="#加" class="headerlink" title="加+"></a>加+</h1><p>1个苹果+1个苹果= 2个苹果</p><p>1个苹果+9个苹果 = 10个苹果</p><p>5个苹果+6个苹果 = 11个苹果</p><p><strong>加法规则可以对两批已知数量的苹果，计算总数</strong></p><h1 id="减"><a href="#减" class="headerlink" title="减-"></a>减-</h1><p>1个苹果-1个苹果 = 0个苹果</p><p>12个苹果-2个苹果 = 10个苹果</p><p><strong>减法规则是加法规则的变形，可以将一批苹果，分成两批</strong></p><h1 id="乘×"><a href="#乘×" class="headerlink" title="乘×"></a>乘×</h1><p>2个苹果×3份 = 2+2+2个苹果 = 6个苹果</p><p>4个苹果×11份 = 4+4+4+4+4+4+4+4+4+4+4个苹果 = 44个苹果</p><p><strong>乘法规则基于加法规则得来，可以快速计算多批等数量苹果的总数</strong></p><h1 id="除÷"><a href="#除÷" class="headerlink" title="除÷"></a>除÷</h1><p>6个苹果÷3份 = 2个苹果</p><p>44个苹果÷4个苹果 = 11份</p><p><strong>除法规则是乘法规则的变形，可以快速将一批苹果分成多批等数量的苹果</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>眼睛是怎么看到东西的？</title>
      <link href="/2021/11/08/%E7%9C%BC%E7%9D%9B%E6%98%AF%E6%80%8E%E4%B9%88%E7%9C%8B%E5%88%B0%E4%B8%9C%E8%A5%BF%E7%9A%84%EF%BC%9F/"/>
      <url>/2021/11/08/%E7%9C%BC%E7%9D%9B%E6%98%AF%E6%80%8E%E4%B9%88%E7%9C%8B%E5%88%B0%E4%B8%9C%E8%A5%BF%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 光 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>malloc</title>
      <link href="/2021/11/08/malloc/"/>
      <url>/2021/11/08/malloc/</url>
      
        <content type="html"><![CDATA[<h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><h1 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h1><h2 id="分配原理"><a href="#分配原理" class="headerlink" title="分配原理"></a>分配原理</h2><p>结构</p><p>block结构</p><h2 id="释放原理"><a href="#释放原理" class="headerlink" title="释放原理"></a>释放原理</h2><h1 id="空闲链表，加快分配"><a href="#空闲链表，加快分配" class="headerlink" title="空闲链表，加快分配"></a>空闲链表，加快分配</h1><h1 id="加锁，并发分配"><a href="#加锁，并发分配" class="headerlink" title="加锁，并发分配"></a>加锁，并发分配</h1><p>pthreadlock</p><p>pthreadtrylock</p><p>futex</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特征函数</title>
      <link href="/2021/11/08/%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/"/>
      <url>/2021/11/08/%E7%89%B9%E5%BE%81%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="泰勒展开式"><a href="#泰勒展开式" class="headerlink" title="泰勒展开式"></a>泰勒展开式</h1><h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><h1 id="概率密度的特征函数"><a href="#概率密度的特征函数" class="headerlink" title="概率密度的特征函数"></a>概率密度的特征函数</h1><h1 id="特征函数的用途"><a href="#特征函数的用途" class="headerlink" title="特征函数的用途"></a>特征函数的用途</h1>]]></content>
      
      
      <categories>
          
          <category> 数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>力</title>
      <link href="/2021/11/08/%E5%8A%9B/"/>
      <url>/2021/11/08/%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 力 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号发射器</title>
      <link href="/2021/11/08/%E4%BF%A1%E5%8F%B7%E5%8F%91%E5%B0%84%E5%99%A8/"/>
      <url>/2021/11/08/%E4%BF%A1%E5%8F%B7%E5%8F%91%E5%B0%84%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 电 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的引用</title>
      <link href="/2021/11/07/%E5%BC%95%E7%94%A8/"/>
      <url>/2021/11/07/%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面的话："><a href="#写在前面的话：" class="headerlink" title="写在前面的话："></a>写在前面的话：</h1><p>&emsp;&emsp;<strong>rbp一般保存栈基址，rsp一般保存栈顶地址，rax一般用作保存返回值，rdi一般用作传一个参数</strong></p><p>&emsp;&emsp;<strong>rbp，rsp的值进入不同函数后是发生改变的</strong></p><p>&emsp;&emsp;<strong>使用gdb的layout regs方式进行汇编代码的调试</strong></p><h1 id="实验的结论是"><a href="#实验的结论是" class="headerlink" title="实验的结论是"></a>实验的结论是</h1><p><strong>这样理解：每个函数都有一个返回变量，放在rax寄存器中，而不要用返回值来称呼返回的东西。</strong></p><p><em><em>type&amp; 引用类型的变量：存放了赋值语句右边的type类型变量的地址，①在赋值时当作type变量使用，②在做形参时传地址(type</em>)，实参是存放这个地址的type&amp;引用变量，③在做返回变量时其实也就是赋值(某变量赋值给返回变量，返回变量赋值给接受变量)。</em>*</p><p>type&amp;作为函数的返回类型，相当于把rax寄存器作为引用变量使用，存放了return语句右边type类型变量的type*地址，当做type类型变量使用。</p><p>使用type变量接收type&amp;返回变量，type&amp;返回变量当做type类型的变量使用，即把返回变量的type值赋值给type接收变量。即把return语句右边的type类型变量赋值给type类型接收变量。</p><p>使用type&amp;变量接收type&amp;返回变量，type&amp;返回变量当做type类型的变量使用，接收变量存放返回变量的地址，可以当做type类型变量使用。即体type&amp;接收变量，存放return语句右边的type类型变量的地址，并当做type类型变量使用。</p><p><strong>对象实际上就是栈上的几个成员变量，函数都在代码区</strong>。</p><p><strong>当把返回对象直接赋值给接收对象时，只需要在局部函数中执行一次构造函数</strong></p><p><strong>除了调用构造函数外，与普通变量的引用并无什么差别</strong></p><h1 id="普通变量的引用类型"><a href="#普通变量的引用类型" class="headerlink" title="普通变量的引用类型"></a>普通变量的引用类型</h1><h2 id="main函数中，int赋值给int"><a href="#main函数中，int赋值给int" class="headerlink" title="main函数中，int赋值给int"></a>main函数中，int赋值给int</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = a;</span><br><span class="line">        <span class="comment">//int c[20] = &#123;0&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/1.png" alt="1.png"></p><p>-0x8(%rbp)存放a的值，-0x4(%rbp)存放b的值。</p><p>注：只有ab变量时，没有sub rsp的操作，a,b在栈顶之外，加上c[20]数组后才有sub rsp的操作。</p><h2 id="main函数中，int赋值给int-amp"><a href="#main函数中，int赋值给int-amp" class="headerlink" title="main函数中，int赋值给int&amp;"></a>main函数中，int赋值给int&amp;</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; b = a;</span><br><span class="line">a = <span class="number">3</span>; </span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/2.png" alt="2"></p><p>-0x14(%rbp)存放变量a的值，-0x10(%rbp)存放b的值，为变量a的地址。</p><h2 id="其它函数中-形参为引用类型"><a href="#其它函数中-形参为引用类型" class="headerlink" title="其它函数中,形参为引用类型"></a>其它函数中,形参为引用类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>&amp; b = a;</span><br><span class="line">        <span class="built_in">f</span>(b);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/3.png" alt="3"></p><p>-0x14(%rbp)存放变量a的值，-0x10(%rbp)存放变量b的值，为变量a的地址。变量a的地址存放到rdi，作为参数传给函数f。</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/4.png" alt="4"></p><p>-0x8(%rbp)存放变量c的值，为变量a的地址，将该地址上的值变为3。我们看到，函数f()获得了main函数中变量的指针。我们再来看一下void f(int*)的反汇编代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        *c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> *b = &amp;a;</span><br><span class="line">        <span class="built_in">f</span>(b);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/5.png" alt="5"></p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/6.png" alt="6"></p><p>和传指针的汇编代码，执行的操作是一样的。</p><h2 id="其它函数中-返回类型为引用类型"><a href="#其它函数中-返回类型为引用类型" class="headerlink" title="其它函数中,返回类型为引用类型"></a>其它函数中,返回类型为引用类型</h2><h3 id="return-局部变量"><a href="#return-局部变量" class="headerlink" title="return 局部变量"></a>return 局部变量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">f</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        b = b+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="built_in">f</span>(a);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107155329342.png" alt="image-20211107155329342"></p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107160841526.png" alt="image-20211107160841526"></p><p>gdb调试查看汇编</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107161603255.png" alt="image-20211107161603255"></p><p>main函数，-0x8(%rbp)存放a变量，赋值为1，传给rdi寄存器(edi是rdi的低32位)。</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107162450323.png" alt="image-20211107162450323"></p><p>f()中，-0x4(%rbp)存放变量b，b赋值为1+2，将0放入rax寄存器(eax是rax的低32位)。</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107162822226.png" alt="image-20211107162822226"></p><p>返回main函数，mov (%rax), %eax的意思是：将以rax寄存器的值指向的内容，放入到rax寄存器(给eax赋值会改变整个rax)中。执行该句后，报错，显然是因为rax里的值是0的缘故：</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107162939823.png" alt="image-20211107162939823"></p><p>段错误，访问了不该访问的内存！</p><p><strong>结论：不可将局部变量作为引用类型返回！</strong></p><hr><h3 id="return-堆上空间的值"><a href="#return-堆上空间的值" class="headerlink" title="return 堆上空间的值"></a>return 堆上空间的值</h3><h4 id="将int-amp-类型的返回值赋值给int类型的变量"><a href="#将int-amp-类型的返回值赋值给int类型的变量" class="headerlink" title="将int&amp;类型的返回值赋值给int类型的变量"></a>将int&amp;类型的返回值赋值给int类型的变量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* b =(<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        *b = a+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> *b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="built_in">f</span>(a);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107170640916.png" alt="image-20211107170640916"></p><p>main函数中，-0x8(%rip)存放了变量a，rdi寄存器保存变量a的值1，进入f()</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107171606010.png" alt="image-20211107171606010"></p><p>f()函数中，-0x14(%rbp)存放值1，rdi赋值为4作为malloc的参数，调用malloc函数。</p><p>malloc函数返回后，rax已经存放了堆上的地址，-0x8(%rbp)存放int* b变量，将堆上地址赋值给int* b变量。</p><p>lea 0x2(%rax),%eax, 表示将0x3指向的空间的地址，也就是0x3赋值给rax寄存器，将0x3放入int* b指向的空间。</p><p>返回值是堆上空间的地址。</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107170333419.png" alt="image-20211107170333419"></p><p>返回main函数，%rax存放了堆上空间的地址，-0x4(%rip)存放了变量c，将堆上空间的值放入-0x4(%rip)。</p><p><strong>问题：</strong>返回main后，没有变量可以指代堆上空间的地址，也就无法释放掉堆上空间</p><p>如果再返回main前，释放掉b指向的空间，我们来看看汇编：</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107173119809.png" alt="image-20211107173119809"></p><p>在f()中调用free(b)，再return *b;</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107173330061.png" alt="image-20211107173330061"></p><p>堆上空间的值，已经被free(b)清零了。<img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107173438290.png" alt="image-20211107173438290"></p><p>最后把值0返回给了c，这不是我们想要的结果！</p><p><strong>结论：将堆上空间的值作为引用类型返回给int变量，实际上是先返回堆上空间的地址，再将堆上空间的值赋值给rax寄存器，rax寄存器再赋值给变量。</strong></p><p><strong>但是由于不再有变量指代堆上空间，程序将不能释放这个堆上空间，导致这部分堆上空间在程序的剩余执行时间内，不再可用，浪费掉了！这叫做内存泄漏。</strong></p><p><strong>而在返回前释放堆上空间，会导致堆上空间清零，虽然返回了堆上空间地址，但赋值给rax寄存器的值是错误的！</strong></p><hr><h4 id="将int-amp-类型的返回值赋值给int-amp-类型的变量"><a href="#将int-amp-类型的返回值赋值给int-amp-类型的变量" class="headerlink" title="将int&amp;类型的返回值赋值给int&amp;类型的变量"></a>将int&amp;类型的返回值赋值给int&amp;类型的变量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* b =(<span class="keyword">int</span>*) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        *b = a+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> *b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>&amp; c = <span class="built_in">f</span>(a);</span><br><span class="line">        c = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">free</span>(&amp;c);</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107175503044.png" alt="image-20211107175503044"></p><p>从f()返回main后，-0x8(%rbp)存放c变量的值，将堆上空间的值放入了c变量中</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107180018364.png" alt="image-20211107180018364"></p><p>c作为堆上空间值的引用，存放了堆上空间的地址，赋值给c时，将值存放到了堆上空间，free(&amp;c)也的确释放了堆上空间。</p><p><strong>结论：将堆上空间的值作为引用类型返回给int&amp;变量，从汇编的角度看c存放了*b的地址，从C++的角度看，c和*b一样，是有着堆上空间地址的int变量。可以通过free(&amp;c)释放掉堆上空间。</strong></p><hr><h3 id="return-堆上空间的地址"><a href="#return-堆上空间的地址" class="headerlink" title="return 堆上空间的地址"></a>return 堆上空间的地址</h3><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107180713880.png" alt="image-20211107180713880"></p><p>报错，编译不通过。看来使用int&amp;作为返回类型，必须return int类型的变量</p><hr><h2 id="返回全局变量"><a href="#返回全局变量" class="headerlink" title="返回全局变量"></a>返回全局变量</h2><h3 id="将int-amp-类型的返回值赋值给int类型的变量-1"><a href="#将int-amp-类型的返回值赋值给int类型的变量-1" class="headerlink" title="将int&amp;类型的返回值赋值给int类型的变量"></a>将int&amp;类型的返回值赋值给int类型的变量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107194634919.png" alt="image-20211107194634919"></p><p>在f()中，全局变量int i的地址放入了rax寄存器中</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107194833278.png" alt="image-20211107194833278"></p><p>将rax存放的地址指向的值，赋值给int类型的接收变量</p><hr><h3 id="将int-amp-类型的返回值赋值给int-amp-类型的变量-1"><a href="#将int-amp-类型的返回值赋值给int-amp-类型的变量-1" class="headerlink" title="将int&amp;类型的返回值赋值给int&amp;类型的变量"></a>将int&amp;类型的返回值赋值给int&amp;类型的变量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>&amp; a = <span class="built_in">f</span>();</span><br><span class="line">        a = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107195403884.png" alt="image-20211107195403884"></p><p>在f()中，同样将全局变量int i的地址放入了rax寄存器中</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107195518061.png" alt="image-20211107195518061"></p><p>int&amp;类型的接收变量a，存放了rax寄存器中的地址，在a=3的执行中，表现的像int类型变量一样，将3赋值给了地址指向的空间，我们知道这个地址就是全局变量i的地址，所以它也改变了i。</p><hr><h1 id="类的引用类型"><a href="#类的引用类型" class="headerlink" title="类的引用类型"></a>类的引用类型</h1><h2 id="main函数中，创建类A的实例"><a href="#main函数中，创建类A的实例" class="headerlink" title="main函数中，创建类A的实例"></a>main函数中，创建类A的实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> b)&#123;a = b;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107204851274.png" alt="image-20211107204851274"></p><p>进入main后，再进入A的构造函数A()，在A中初始化类A的成员变量，A a1创建的对象，成员变量在栈上。A a1 = new A创建的对象，成员变量在堆上。所有函数都存放在内存的代码区中。</p><h2 id="main函数中，类A的对象赋值给类A的对象"><a href="#main函数中，类A的对象赋值给类A的对象" class="headerlink" title="main函数中，类A的对象赋值给类A的对象"></a>main函数中，类A的对象赋值给类A的对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> b)&#123;a=b;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="function">A <span class="title">a2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">        a1 = a2;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107214336672.png" alt="image-20211107214336672"></p><p>对象a1的成员变量存放在0x7fffffffdf80，即-0x10(%rbp)处，对象a2的成员变量存放在0x7fffffffdf84，即-0xc(%rbp)处，对象的赋值，就是把a2的成员变量赋值给a1的成员变量。</p><p>A类有两个成员变量也是一样的操作：只不过这次移动了64位</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107215714204.png" alt="image-20211107215714204"></p><p>A类有3个成员变量也是一样的操作：只不过分64位，32位各移动了一次</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107220125398.png" alt="image-20211107220125398"></p><h2 id="main函数中，A赋值给A-amp"><a href="#main函数中，A赋值给A-amp" class="headerlink" title="main函数中，A赋值给A&amp;"></a>main函数中，A赋值给A&amp;</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        A&amp; a2 = a1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107220546454.png" alt="image-20211107220546454"></p><p>-0x10(%rbp)存放对象a1，-0x18(%rbp)存放对象a2，把对象a1的地址，赋值给了对象a2。 </p><h2 id="成员函数中，形参为引用类型"><a href="#成员函数中，形参为引用类型" class="headerlink" title="成员函数中，形参为引用类型"></a>成员函数中，形参为引用类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">A</span>(A&amp; a)&#123;</span><br><span class="line">                _a = a._a;</span><br><span class="line">                _b = a._b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="function">A <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107221844365.png" alt="image-20211107221844365"></p><p>main函数中，进入A()构造对象a，将对象a的地址存放到寄存器rdi中，进入成员函数A(A&amp;)</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107222503560.png" alt="image-20211107222503560"></p><p>借助传入的对象a的地址，将对象a的值赋值给对象b。</p><h2 id="成员函数中，返回类型为类类型"><a href="#成员函数中，返回类型为类类型" class="headerlink" title="成员函数中，返回类型为类类型"></a>成员函数中，返回类型为类类型</h2><h3 id="main函数先构造对象b再接受返回变量，f-返回构造好的对象；"><a href="#main函数先构造对象b再接受返回变量，f-返回构造好的对象；" class="headerlink" title="main函数先构造对象b再接受返回变量，f()返回构造好的对象；"></a>main函数先构造对象b再接受返回变量，f()返回构造好的对象；</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类A有2个整型成员变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入main()，进入A()构造对象b，进入f()，进入A()构造对象a，返回f()，将对象a的两个成员变量值放入rax寄存器中，返回main()，将rax寄存器中的值赋值给对象b。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类A有3个int型成员变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">                _c = c;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">        <span class="keyword">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入main()，进入A()构造对象b，进入f()，进入A()构造对象a，返回f()，**将对象a的三个成员变量值拷贝一份(属实迷惑到我了，5 个整型变量又不拷贝一份了)**，将拷贝后的值放入rax(64位)和rcx(32位)寄存器中，返回main()，将rax和rcx寄存器中的值赋值给对象b。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类A有一个数量为5的int型数组</span></span><br><span class="line"><span class="keyword">int</span> aarray[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> barray[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span>* a)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">4</span>; i++)</span><br><span class="line">                        _a[i] = a[i];</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a</span><span class="params">(aarray)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">A <span class="title">b</span><span class="params">(barray)</span></span>;</span><br><span class="line">        b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211107233517399.png" alt="image-20211107233517399"></p><p>进入main()，进入A()构造对象b，进入f()，进入A()构造对象a，返回f()，将对象a的地址赋值给rax寄存器，返回main()，借助rax，rbx寄存器将对象a的数组值拷贝给对象b的数组。</p><p><strong>将类A改成有5个整型成员变量，也是一样的操作，借助rax，rbx寄存器将对象a的值，拷贝给对象b的数组</strong></p><h3 id="f-直接返回构造函数"><a href="#f-直接返回构造函数" class="headerlink" title="f()直接返回构造函数"></a>f()直接返回构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">A</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入main()，进入A()构造对象b，进入f()，进入A()构造对象a，返回f()，将对象a的两个成员变量值放入rax寄存器中，返回main()，将rax寄存器中的值赋值给对象b。<strong>与1无区别</strong></p><h3 id="main函数直接用f-的返回变量构造对象b"><a href="#main函数直接用f-的返回变量构造对象b" class="headerlink" title="main函数直接用f()的返回变量构造对象b"></a>main函数直接用f()的返回变量构造对象b</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        A b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入main()，进入f()，进入A()构造对象，返回f()，将对象的两个成员变量值放入rax寄存器中，返回main()，将rax寄存器中的值赋值给对象b。<strong>相比1，少调用一次构造函数构造b</strong></p><h3 id="main函数直接用f-的返回变量构造对象b，f-直接返回构造函数"><a href="#main函数直接用f-的返回变量构造对象b，f-直接返回构造函数" class="headerlink" title="main函数直接用f()的返回变量构造对象b，f()直接返回构造函数"></a>main函数直接用f()的返回变量构造对象b，f()直接返回构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">A</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        A b = <span class="built_in">f</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同3，相比1，少调用一次构造函数构造b</strong></p><h2 id="成员函数中，返回类型为引用类型"><a href="#成员函数中，返回类型为引用类型" class="headerlink" title="成员函数中，返回类型为引用类型"></a>成员函数中，返回类型为引用类型</h2><h3 id="return-局部变量-1"><a href="#return-局部变量-1" class="headerlink" title="return 局部变量"></a>return 局部变量</h3><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211108002331594.png" alt="image-20211108002331594"></p><p>同样不能返回局部对象，通不过编译</p><h3 id="return-堆上对象"><a href="#return-堆上对象" class="headerlink" title="return 堆上对象"></a>return 堆上对象</h3><h4 id="接收变量为类型A"><a href="#接收变量为类型A" class="headerlink" title="接收变量为类型A"></a>接收变量为类型A</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">        &#123;</span><br><span class="line">                _a = a;</span><br><span class="line">                _b = b;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> _a;</span><br><span class="line">        <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A&amp; <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        A b = <span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211108003228999-16363027511231.png" alt="image-20211108003228999"></p><p>进入f()，new一个8字节(类A实例的大小)的空间，进入A()构造对象，将对象的地址放到rax寄存器中，返回f()，返回main()</p><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211108003633970.png" alt="image-20211108003633970"></p><p>借助构造对象的地址，将对象的值，存放到对象b中，<strong>然后丢失new的地址</strong>。</p><h4 id="接受变量为类型A-amp"><a href="#接受变量为类型A-amp" class="headerlink" title="接受变量为类型A&amp;"></a>接受变量为类型A&amp;</h4><p><img src="/2021/11/07/%E5%BC%95%E7%94%A8/image-20211108003907226.png" alt="image-20211108003907226"></p><p>将对象的地址，存放到对象b中。</p><h3 id="return-全局对象"><a href="#return-全局对象" class="headerlink" title="return 全局对象"></a>return 全局对象</h3><p>崩看了，所有分析都与普通变量无二。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HandleImage</title>
      <link href="/2021/11/06/HandleImage/"/>
      <url>/2021/11/06/HandleImage/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇博文讲解了本地图片的路径设置"><a href="#这篇博文讲解了本地图片的路径设置" class="headerlink" title="这篇博文讲解了本地图片的路径设置"></a>这篇博文讲解了本地图片的路径设置</h1><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">(32条消息) hexo博客中插入图片失败——解决思路及个人最终解决办法_m0_43401436的博客-CSDN博客</a></p><p>本地source文件夹里的md文件和图片整好后，hexo执行编译工作，在public文件夹中生成网页及图片</p><h1 id="下载插件并修改代码确实解决了问题"><a href="#下载插件并修改代码确实解决了问题" class="headerlink" title="下载插件并修改代码确实解决了问题"></a>下载插件并修改代码确实解决了问题</h1><p>安装的插件是hexo-asset-image, 将/node_modules/hexo-asset-image/index.js的代码修改为:</p><p>具体过程可以参考这篇博文<a href="https://www.cnblogs.com/cscshi/p/15196100.html">Hexo-NexT 添加图片 - chang101 - 博客园 (cnblogs.com)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="持久化文章url后，出现了新的问题"><a href="#持久化文章url后，出现了新的问题" class="headerlink" title="持久化文章url后，出现了新的问题"></a>持久化文章url后，出现了新的问题</h1><p>&emsp;&emsp;本博客参考了系列视频<a href="https://space.bilibili.com/13282871/video">卷二兔的个人空间_哔哩哔哩_bilibili</a>制作，作者使用了持久化文章url的技术。        </p><p>&emsp;&emsp;持久化文章url-uniform resource locator-同一资源定位符，是为了文章更好地被搜索引擎收录(需要不少配置)，生成简单且不随标题而改变的url。</p><p>&emsp;&emsp;<strong>但是！使用abbrlink持久化文章链接名称后，图片路径在本地没问题，部署到github后，其html网页中的图片路径会出新问题。</strong></p><p>&emsp;&emsp;试图看index.js在干嘛，无果，于是怕麻烦的我取消了持久化，回到了美好的从前。</p><h1 id="可以使用图床"><a href="#可以使用图床" class="headerlink" title="可以使用图床"></a>可以使用图床</h1><p>&emsp;&emsp;本博客参考了系列视频<a href="https://space.bilibili.com/13282871/video">卷二兔的个人空间_哔哩哔哩_bilibili</a>制作，其中提到了图床技术，将所有图片上传到github上的图床仓库，这样本地md文件和生成的网页中，图片的地址就都是网上图片了，从而不用考虑文件结构的变化。理论上，使用图床，就可以解决持久化url的问题。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>访问github并不容易</span></div>    <div class="hide-content"><p>&emsp;&emsp;可是访问github并不容易，需要处理域名污染(查真实ip地址来改hosts，防止dns-domain name server-域名服务器返回错误的ip地址)，需要vpn(加密请求的ip地址，使其符合路由节点的入站规则，拿到东西了再在本机上解密)。</p><p>&emsp;&emsp;然而网页和图片都在github的服务器上，所以要么都能访问到，要么都访问不到，所以真要搞一个基于github的博客，这样搞还是挺好的。</p><p>&emsp;&emsp;但是我只是想有一个记录自己所思所想的博客，觉得本地搞好方便，省去了搞ip的麻烦，果然还是回退到二吧。</p></div></div><p>&emsp;&emsp;其实根本原因还是不知道hexo是怎么把source中的md文件和图片生成为pulic中的网页和图片的，要是我知道用什么语法改哪个配置文件，就能自己设置两者的对应关系了。</p>]]></content>
      
      
      <categories>
          
          <category> blog in hexo+github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通用测量单位</title>
      <link href="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/"/>
      <url>/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>一秒到底是多久？一米到底是多长？一克到底是多重？……？</p><p>没有统一的标准，就无法观测和记录世间的一切客观属性。</p><p>那么，我们习以为常的观测单位是怎么产生的呢？</p><h1 id="国际单位制"><a href="#国际单位制" class="headerlink" title="国际单位制"></a>国际单位制</h1><p>&emsp;&emsp;国际单位制（法语：Système International d’Unités ，缩写：SI）源自米制，是国际计量大会采纳和推荐的单位标准。国际单位制是国际通用的测量标准，是人类描述和定义世间万物的标尺。</p><table><thead><tr><th align="center">物的属性</th><th align="center">基本单位</th></tr></thead><tbody><tr><td align="center">时间</td><td align="center">秒(second)</td></tr><tr><td align="center">长度</td><td align="center">米</td></tr><tr><td align="center">质量</td><td align="center">千克</td></tr><tr><td align="center">电流</td><td align="center">安培</td></tr><tr><td align="center">温度</td><td align="center">开尔文</td></tr><tr><td align="center">物质的量</td><td align="center">摩尔</td></tr><tr><td align="center">发光强度</td><td align="center">坎德拉</td></tr></tbody></table><h2 id="时间：一秒到底是多久？"><a href="#时间：一秒到底是多久？" class="headerlink" title="时间：一秒到底是多久？"></a>时间：一秒到底是多久？</h2><p>&emsp;&emsp;时间是其中最抽象的概念，不像长短，重量给人的直观感受，人是通过周围事物的改变，通过太阳升起又落下，树木枯萎又抽芽，温度冷转冷又转热，朱颜辞镜花辞树，才感觉到，事物在一刻不停地改变着，有一种不可阻挡，永不回头，完全不可控的力量，推动着万物的改变。人称此力为时，时如川，裹挟着落花，不停地向前流动。</p><p>&emsp;&emsp;人觉得有必要记录重要的事物特征，顺应天时以求更好地过活，于是根据事物重要特征的出现，定义了重要的时间点：如日出之时，日落之时。根据时间点的间隔又定义了原始的时间单位：如一日。从而又产生了新的时间点和时间单位：如月缺之日，月圆之日，一月，温暖之月，寒冷之月，一季等。</p><p>&emsp;&emsp;一开始，人定义了重要的时点，产生了时间单位的概念（日，月，年等），接着，人试图用规律变化的工具来人造更小的时段。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>古老的计时工具</span></div>    <div class="hide-content"><p>运用自然物质和简单物理原理来计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/fed0faca79b740aa9676d782d24f0cc8.jpeg" alt="img"></p><p>水钟也叫漏刻，以水的流动计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/9cffe790183c4eaab13c1e71e915a5bd.gif" alt="img"></p><p>沙漏计时器，以沙的流动计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/866571d17fae47ceb1c8f054dc33f729.jpg" alt="img"></p><p>古代计时器——日晷，立杆成影的成语即来源于此，借助太阳的位置变化，光的直线传播计时</p><p><img src="/2021/11/03/%E9%80%9A%E7%94%A8%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D/56d058943da347efa022bbc40df141bc.jpeg" alt="img"></p><p>1090年，北宋发明</p><p>水运仪象台（现代复建），是世界上的钟表鼻祖，具有天文观测，天文演示，自动报时功能。</p></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>伽利略发现了摆的等时性</span></div>    <div class="hide-content"><p>&emsp;&emsp;据说,有一次伽利略到教堂作礼拜,礼拜开始不久,一位工人给教堂中的大吊灯添加灯油时,不经意触动了吊灯,使它来回摆动。摆动着的大吊灯映入了伽利略的眼帘,引起他的注意。伽利略聚精会神地观察着,他感觉到吊灯来回摆动的时间好像是相等的。</p><p>&emsp;&emsp;伽利略知道人的脉搏是均匀跳动的,于是,他利用自己的脉搏计时,同时数着吊灯的摆动次数。起初,吊灯在摆动的幅度比较大,摆动速度也比较大,伽利略测算了来回摆动一次的时间。过了一会儿,吊灯摆动的幅度变小了,摆动速度也变慢了,此时,他又测量了吊灯来回摆动一次的时间。让他大为吃惊的是,两次测量的时间是相同的。于是伽利略继续测量来回摆动一次的时间,直到吊灯几乎停止摆动时才结束。可是每次测量的结果都表明来回摆动一次需要相同的时间。通过这些测量使伽利略发现:吊灯来回摆动一次需要的时间 与摆动幅度的大小无关,无论摆幅大小如何,来回摆动一次所需时间是相同的,也就是说吊灯的摆动具有等时性,或者说具有周期性。</p><p>&emsp;&emsp; 伽利略是一位十分认真又喜欢研究问题的人,根本不会满足只从一次实验中得到的结果。对于自然现象,他总是反复进行实验研究,探索其中蕴藏的奥秘。他想,吊灯摆动的快慢(也称为摆动的周期)可能跟哪些因素有关呢? 通过在教堂中的观察,伽利略已经知道,摆动的周期跟摆动幅度无关。他猜想,是否跟吊灯的轻重有关呢?是否跟吊绳的长短有关呢?还有没有其他因素呢? 为了模拟吊灯的摆动,他找来丝线、细绳、大小不同的木球、铁球、石块、铜球等实验材料,用细绳的一端系上小球,将另一端系在天花板上,这样就做成了一个摆。用这套装置,伽利略继续测量探索摆动的周期。他先用铜球实验,又分别换用铁球和木球实验。实验使伽利略看到,无论用铜球、铁球,还是木球实验,只要摆长不变,来回摆动一次所用时间就相同。这表明单摆的摆动周期与摆球的质量无关。伽利略又做了十几个摆长不同的摆,逐个测量它们的周期。实验表明:摆长越长,周期也越长,摆动得就越慢。</p></div></div><p>再后来出现了晶振，机械表升级成为电子表，对时间间隔的定义也精确到了微秒级。</p><p>后来通过研究电子跃迁，发明了原子钟。精度可以达到几十万年一秒的误差。</p><p>再后来研究相对论，这些就脱离了日常生活，接触不到了，故不谈。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>长度：一米到底是多长？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>质量：一千克到底是多重？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>电流：？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>温度：？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>物质的量？</span></div>    <div class="hide-content"></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>发光强度？</span></div>    <div class="hide-content"></div></div>]]></content>
      
      
      <categories>
          
          <category> 基石 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
